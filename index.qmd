---
title: "Runapp talk"
author: "James Goldie"
format:
  revealjs: 
    theme: [default, style.scss]
    width: 1400
---

## Outline

- What is Quarto?
  - How it builds on RMarkdown
    - RMarkdown/Knitr ecosystem, extensions, other languages
    - Extensibility! ðŸŽ‰
    - But also: fragmentation,which  and heavy reliance on R
  - Quarto packs all these tools in
    - Only needs R if you're doing computation with R
    - ...

## Slide 1: blah
```{r}
mydata <- data.frame(
  x = 1:10,
  y = (1:10)^2)

ojs_define(mydata)
```

```{ojs}
Reveal.on("stackslide", () => { console.log("Reached stackslide!"); } );
Reveal.on("fragmentshown", e => { 
  console.log("Reached fragment #" + e.fragment.attributes["data-fragment-index"].value);
  console.log(e);} );
```

A very quiet slide


And something else!

## Survey: what tools do you use?

:::: {.columns}

::: {.column width="50%"}
Take the survey at <https://forms.gle/GtszJpXZYjppsQAz8>
:::

:::{.column width="50%" style="filter:invert(1)"}
![](./images/qrcode-survey.png)
:::

::::

## {.text-wash-seafoam}

```{ojs}
md`## Survey results (Respondents: ${respondentCount})`
```

```{ojs}

import { liveGoogleSheet } from "@jimjamslam/live-google-sheet";
import { aq, op } from "@uwdata/arquero";

surveyResults = liveGoogleSheet(
  "https://docs.google.com/spreadsheets/d/e/" +
    "2PACX-1vSVQzZlkSWWR38FRKyFbO2WGYo04ehrJt4TvWkRVOJ7WPRmfQzPAf7AjtyV2EjIY-2DwKW-SfzLoEQw/" +
    "pub?gid=1368316628&single=true&output=csv",
  30000, 1, 2);

respondentCount = surveyResults.length;
```

```{ojs}

// get the counts of people using and interested in tools
countsUsed = aq.from(surveyResults)
  .derive({ used: d => op.split(d.responseUsed, ", ") })
  .select("used")
  .unroll("used")
  .groupby("used")
  .count()
  .derive({ measure: d => "Have used" })
  .rename({ used: "tool" })
```

```{ojs}
countsWant = aq.from(surveyResults)
  .derive({ want: d => op.split(d.responseWant, ", ") })
  .select("want")
  .unroll("want")
  .groupby("want")
  .count()
  .derive({ measure: d => "Want to learn" })
  .rename({ want: "tool" })
```

```{ojs}
// combine the two counts into one dataset again
countsAll = [...countsUsed.objects(), ...countsWant.objects()];

plotUsed = Plot.plot({
  marks: [
    Plot.barX(countsAll, { y: "tool", x: "count", fill: "tool" })
  ],
  x : { label: "" },
  y : { label: "", tickSize: 0 },
  facet: { data: countsAll, x: "measure", label: "" },
  marginLeft: 140,
  style: {
    backgroundColor: "black",
    color: "white",
    width: 1350,
    height: 500,
    fontSize: 12,
  }
});
```
